This is a backup for assimp port to Android and demo app that can call assimp from native activity. It proves the OpenGL implmentation on Android + assimp

TODO
===========
Need to enable switching between different models, some meshes work fine, some not. Seems the mesh may conflict with each other in current renderer code. Need to figure out why.
The models draw from COLLADA files seems wrong in z-order
COLLADA import will fail after exported from Blender 2.77
It seems the lighting system is not working properly.
Need to check if I can reuse FreeGlut framework
Need to add gaming control to existing input handler
Need to add frame rate control

DONE
===========
DONE Need to support static mesh rendering. It seems does not work for now.
Re-engineered part of the code as a start to introduce multiple model support.
DONE Need to enable debug inside ASSIMP, it is done by correcting the build path. But there are still remain some paths are very tedius to correct. I have to change CMakeCache.txt to control most of them. To fix all of them need deep dive into CMake which is not current priority.
DONE Add new test files for COLLADA file format
DONE Add PNG support in ImageMagick++
DONE by supporting COLLADA files format which can be easily export from Blender, Need to add blender animation plugin to assimp so that I can load animation from blender or compatible file format
DONE Need to cleanup header files and a few folders
FIXED The directories are messed up due incremental changes to the way I organizing third party libraries.
FIXED by pre calculate in index buffer. Reference to OpenGL API dev notes. The head and lantern of the model is not rendered correctly, needs investigation.
Temporaily FIXED by calling exit() when destroying display object. The resource management is not implemented. Animation will not run when launch second time.
FIXED by remove the clearColor() call There is a flash between frames.
FIXED by maintain a proper W/H ratio. The model is stretched.
FIXED by pre calculate in index buffer. Reference to OpenGL API dev notes. The texture seems not proper.

Notes
===========
Blender export problem
----------------
The cycles renderer cannot export texture correctly, need to swtich back to use blender built-in renderer. Maybe it is not worth for now to develop a python script to export texture for cycles, because cycles seems not designed for game assets developing anyway.

Also, the mesh is too small when display on the phone. It seems the mesh need to be scale up to 10-20 times big. Maybe a python script will help.


std::string
----------------
This class seems does not work well on Android. If we use 'string a = "bb";', the class will contain malformed characters rather than "bb". It results vary problems in the code. I have to split it into: 'string a; a.append("bb");'.

STL map
----------------
The STL map created a lot of problems. It seems it does not work with std::string well. For some reason it keeps crashing when use std::string as key. Here is how I tested the STL map, which fail:

std::map<string, int> myMap;
myMap.clear();
myMap["AAAAAA"] = 12;
myMap["BBBBBB"] = 222;
myMap["CCCCCC"] = 121;
    
The first call will crash immediately since the problem with std::sting. If we change it into:

string a;
a.append("AAAAAA");
myMap[a] = 12;
sting b;
b.append("BBBBBB");
myMap[b] = 222;
sting c;
c.append("CCCCCC");
myMap[c] = 121;

It will crash when 'myMap[b] = 222;' gets called. Tested in vary solutions, eventually it turns out not crashing, after I change the 'string' into 'char*', giving up using string in STL map class.

But another problem is that the template map does not support comparison for char*, so I have to add a comparitor in order to make it work, otherwise find() call will always return null.

Final solution:

struct cmp_str
{
    bool operator()(char const *a, char const *b)
    {
        return strcmp(a, b) < 0;
    }
};
map<char*,uint,cmp_str> m_BoneMapping; // maps a bone name to its index

Shaders
----------------
Since this is the first time working on Android shader. It seems a lot difference between regular shader code and Android shader.

First of all, the "#version 330" will not work. The phone I tested is Samsung Galaxy S6, and it does not support 330. I tried to change into "#version 300 es". Even though it compiles, but actually created a lot of problem later when I try to use attributes and other key words. Eventually after study Google example code, I removed the "#version" key word all together.

"layout" key word also not supported. I changed into "attribute". "out" key word will cause problem when compiling without "#version" key word. I changed it into "varying".

"ivec4" also will create compiling problems, I have to change it into "vec4", and change corresponding code to use float instead of integer. Hence, the shader has to cast the float back into integer when using it as array index:

BoneTransform += gBones[int(BoneIDs[1])] * Weights[1];

Also, I changed the FragColor into gl_FragColor and position into gl_Position.

It seems using "precision highp float;" is necessary, otherwise the compiling will fail.

OpenGL API
----------------
As expected, not all OpenGL API are supported. The ones not supported:

glGenVertexArrays()
glBindVertexArray()
glVertexAttribIPointer()
glDrawElementsBaseVertex()

I changed the code to use regular buffer rather than vertex array avoiding using glGenVertexArrays().
Also since the integer ivec4 is not supported in shader, so naturally I have to change glVertexAttribIPointer() into glVertexAttribPointer() to map float instead integer.
glDrawElementsBaseVertex() can be replaced by glDrawElements(), due to my test. It turns out working just fine.

glDrawElementsBaseVertex(GL_TRIANGLES,
                         m_Entries[i].NumIndices,
                         GL_UNSIGNED_INT,
                         (void*)(sizeof(uint) * m_Entries[i].BaseIndex),
                         m_Entries[i].BaseVertex);


glDrawElements(GL_TRIANGLES, m_Entries[i].NumIndices, GL_UNSIGNED_INT,
                       (void*)(sizeof(uint) * m_Entries[i].BaseIndex));

The change to glDrawElements() causes problem when draw multiple entries (meshes). That is why the model head and other meshes are not correctly drew on the screen. The fix would be take BaseVertex into account. When I got the Indices values in LoadMesh(), I add the BaseVertex dirctly to Indices values before even binding the array to vertex buffer. In this way, BaseVertex is already taken into account in index buffer, no need for glDrawElementsBaseVertex(). Problem resolved!

                       
FreeGlut
----------------
I was able to compile and run FreeGlut on Android, but it does not show anything. It seems the initialization is not working for Android. I have not dig into see why. Instead of using FreeGlut, I just wrote my own initialization which is probably good for a prototype.

Modulize
----------------
Originally, I would like to keep it modulized. I compile FreeGlut, ImageMagick++, Assimp separately, but since too many broken pieces in different module need my debugging. I eventually end up put them into one project. This is TODO item, should later figure out modulizing those modules. Hopefully can make FreeGlut work again.

Dynamic Linking
----------------
I got a dynamic link problem at very beginning of this project. By search on the Internet, I figured out I have to overwrite the NativeActivity class in Java layer to preload my dependences like: "stlport_shared", "assimp". This seems stupid, but it happened. Also, I should remove the tag 'android:hasCode="false"' in application parameter list, in order to overwrite the NativeActivity class.

Exception support in C++
----------------
It seems adding following flags to CMakeLists.txt helps:

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fexceptions -v")
set( CMAKE_VERBOSE_MAKEFILE on )

Some of the library code need exception handling.

Compile
===========

To compile assimp, we need download CMake 3.7.0-rc3 on Mac OSX 10.11.

Some configurations may matter:

set source code location to assimp
set build binaries location to bin

add configure entries:
ANDROID_ABI:armeabi-v7a
ANDROID_NATIVE_API_LEVEL:9
ASSIMP_ANDROID_JNIIOSYSTEM:ON
ASSIMP_INCLUDE_INSTALL_DIR:include
ASSIMP_LIB_INSTALL_DIR:lib
CMAKE_ASM_COMPILER:${Your NDK path}/ndk-bundle/toolchains/arm-linux-androideabi-4.9/prebuilt/darwin-x86_64/bin/arm-linux-androideabi-gcc
CMAKE_INSTALL_PREFIX:${Your NDK path}/ndk-bundle/toolchains/arm-linux-androideabi-4.9/prebuilt/darwin-x86_64/user
CMAKE_TOOLCHAIN_FILE:${Your Android CMake path - in this repo}/android-cmake/android.toolchain.cmake

Then click on "Configure" button and "Generate" button. Makefiles should be generated. Go ahead and make it.

