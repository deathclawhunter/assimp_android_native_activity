This is a backup for assimp port to Android and demo app that can call assimp from native activity. It proves the OpenGL implmentation on Android + assimp

TODO
===========
Need to figure out why Factor variable in CalcInterpolatedPosition() sometime becomes negative.
Need to support collision detection
Need to test multiple animation switch for the same mesh
Need to support dynamic attribute in shader instead of fixed attribute
Need to start import demo assets into test engine
It seems the lighting system is not working properly.

DONE
===========
Added the first scene. Found some problems with Z-order, see notes. Also probably found out the solution for this problem: The models draw from COLLADA files seems wrong in z-order.
Added 2D animation for some special effect like: crosshair, muzzle flash etc.
Added simple configure file
Added SkyBox
Added freetype to support text plugin
Enabled separated HUD plugin instead of using in-scene plugin which is confusing.
Figured out how to export blender animation to this engine. See notes.
Added plugin manager to simplify the main.cpp.
Need to add sound system
 - Hello has been played.
Need to support multiple render content plugins at the same time like: UI frame, Animation, Video, Audio so on so forth.
 - Converted existing scene, helloworld, video into plugins
 - helloworld and video can run simultaneously.
Render animation and sound in the demo.
 - Video decoding and rendering start to work in demo, need to figure out how to coordinate between decoding and rendering, it seems always render the last frame.
 - Able to play full screen video now. Can add clip and scale down video later. For demo, just scale up and screen fit is OK.
Seem OK for now. Need to add frame rate control
DONE by adding basic navigation system. Need to add gaming control to existing input handler
Added H264 decoder
Added ffmpeg
Added basic navigation methods. (One finger rotation, two fingers move)
DONE by integrate static shader and rigged shader into one shader, see Bone transformation problem and multiple shader problem in notes: Need to enable switching between different models, some meshes work fine, some not. Seems the mesh may conflict with each other in current renderer code. Need to figure out why.
DONE Need to support static mesh rendering. It seems does not work for now.
Re-engineered part of the code as a start to introduce multiple model support.
DONE Need to enable debug inside ASSIMP, it is done by correcting the build path. But there are still remain some paths are very tedius to correct. I have to change CMakeCache.txt to control most of them. To fix all of them need deep dive into CMake which is not current priority.
DONE Add new test files for COLLADA file format
DONE Add PNG support in ImageMagick++
DONE by supporting COLLADA files format which can be easily export from Blender, Need to add blender animation plugin to assimp so that I can load animation from blender or compatible file format
DONE Need to cleanup header files and a few folders
FIXED The directories are messed up due incremental changes to the way I organizing third party libraries.
FIXED by pre calculate in index buffer. Reference to OpenGL API dev notes. The head and lantern of the model is not rendered correctly, needs investigation.
Temporaily FIXED by calling exit() when destroying display object. The resource management is not implemented. Animation will not run when launch second time.
FIXED by remove the clearColor() call There is a flash between frames.
FIXED by maintain a proper W/H ratio. The model is stretched.
FIXED by pre calculate in index buffer. Reference to OpenGL API dev notes. The texture seems not proper.

WILL NOT FIX
===========
COLLADA import will fail after exported from Blender 2.77, the reason is the bone number exceeded the limit. Given we are creating simple demo, no complicated object or animation expected. I can live with that. 
Need to check if I can reuse FreeGlut framework, the answer is YES we can, but it is just a matter of time vs gain. I would live without FreeGlut for this demo.


Notes
===========
Z-order with Blender Export
----------------
The reason is not very clear. But it seems connecting all meshes together will help OpenGL ES to come up with correct Z-order, otherwise the Z-order could be wrong probably due to the drawing order that OpenGL ES come up with with different vertex group.


Input Handling
----------------
Based on the study of other mobile gaming apps. Eventually decided to go with simple input. Simple input design including 2 options for user:

1) Use single touch to rotate the screen horizontally, and use touch finger touch to start/stop running.

2) Use accelerater sensor to rotate the screen horizontally, and use single finger touch to start/stop running.

The fire action should be automatically taken care of once the cross hair align with the target.

Limitations are user cannot rotate vertically and user cannot not run backwards.

Export animation
----------------
The author tool is Blender 2.7. I believe the reason is that either Blender does not export Bone animation correctly or assimp importer does not fully support Collada animation especially Bone animation. So here are the tricks to make it work:

1. Scale
As mentioned in previous note, the size need to be scaled up in order to see it in current coordinate system and default transformation. However, more importantly, all scale, rotation, position change should be applied before export by Ctrl-A on the objects.

2. Parent
The way I setup the animation is parenting the object to armature by choosing Bone option when the Ctrl-P popup comes. Thus I do not have to worry about the weight as such, because the Bone is designed for mechanics items like: robot arm. However, this approach defintely does not work very well with current implementation. After exporting the Collada file, I found the tag "library_controller" is missing, which will leads to that the engine does not draw animation later. To resolve it, I have to choose auto weight instead of Bone option when Ctrl-P popup comes. And YES, this will generate "library_controller" tag.

3. Texture
The texture is quite tricky one. You have to apply texture before you start animate the objects (apply armature). Otherwise the texture is just not appearing in material tag.

4. Export menu
By default the animation is not checked for exporting. I have to explicitly specify export everything animation, and texture.


Sound system
----------------
Eventually, I choose to use default Android native audio API instead using ffmpeg to sync the audio frames vs video frames given this is a simple demo. But the decoding of ffmpeg audio has been experimented successfully. Playing sound in ffmpeg is doable.


Game flow control
----------------
Since in this demo, I am not currently planning to add game script support. That means the gaming flow will be controlled in a less flexible way. Like plugin status.

Plugin status are a bunch of status to tell the pipe line if the plugin need to be drawn, or need to be initialized or termiated. A special plugin status added for app scene class is initialize later - PLUGIN_STATUS_INITIALIZE_LATER. It indicates the pipe line to initialize this particular plugin after all previous plugins finished. The reason is that it seems the video plugin conflicts with scene plugin. Keep in mind the plugins are processed in the sequence of the orders that they are in the plugin linked list, in first come first serve manner.

Maybe I should dig into to see if I can remove the initialize later flag. But again it is not critical for now for this demo. 


HUD layer
----------------
Orthogonal matrix is one way to implement the HUD layer. Shortcut to implement this in this demo is using the first matrix as HUD matrix, which means as long as the HUD mesh place correctly with the first matrix (without any camera movement). We use this matrix as our HUD instead of searching how to implement a orthogonal transform for HUD meshes.

So given this solution, a flag added to mesh class - IsHudMesh. And Init() of AppMesh has been changed into accept two arrays, one is for regular meshes, one is for HUD meshes. In our rendering process, instead of using WVP matrix, we are using HUD matrix for HUD meshes.


glpixelstorei()
----------------
If next using multiple shaders across different program, glpixelstorei() should be carefully taken care. Since it will change the way opengl interpret the texture across all programs and shaders.


Bone transformation problem
----------------
Sine rigged mesh will need bone transformation, while static mesh does not. It will cause the static mesh to be transformed by uninitialized bone matrix. The solution is to initialize the bone buffer for static mesh in a way that the final transformation leads to a identity matrix. Concrete solution is that initialize the ID buffer for every single vertex to point to gBone[0], and let weight[0] = 1, rest of weights to be 0, so that:

let gBone[0] = identity matrix
transform = gBone[0] * 1 + gBone[0] * 0 + gBone[0] * 0 + gBone[0] * 0 = gBone[0]


Multiple shader problem
----------------
Even though some article in the Internet mentioned glUseProgram() can enable multiple shaders to be used simultaneously, but I found it only render one object at a time. The cause of the problem is that the attributes from the same shader will conflict with itself, which means I cannot create multiple shader instances for the same shader. Maybe OK for different shader, but for the same shader, I cannot create multiple instances. Therefore, I have to use only one instance for the same shader which is main_shader.* right now, and bind different buffer from different mesh object.


Blender export problem
----------------
The cycles renderer cannot export texture correctly, need to swtich back to use blender built-in renderer. Maybe it is not worth for now to develop a python script to export texture for cycles, because cycles seems not designed for game assets developing anyway.

Also, the mesh is too small when display on the phone. It seems the mesh need to be scale up to 10-20 times big depends on current mesh transformation matrix in the code. More importantly, the scaling has to be applied in edit mode since the code does not pick up the scaling factors at all. Maybe a python script will help.


std::string
----------------
This class seems does not work well on Android. If we use 'string a = "bb";', the class will contain malformed characters rather than "bb". It results vary problems in the code. I have to split it into: 'string a; a.append("bb");'.

STL map
----------------
The STL map created a lot of problems. It seems it does not work with std::string well. For some reason it keeps crashing when use std::string as key. Here is how I tested the STL map, which fail:

std::map<string, int> myMap;
myMap.clear();
myMap["AAAAAA"] = 12;
myMap["BBBBBB"] = 222;
myMap["CCCCCC"] = 121;
    
The first call will crash immediately since the problem with std::sting. If we change it into:

string a;
a.append("AAAAAA");
myMap[a] = 12;
sting b;
b.append("BBBBBB");
myMap[b] = 222;
sting c;
c.append("CCCCCC");
myMap[c] = 121;

It will crash when 'myMap[b] = 222;' gets called. Tested in vary solutions, eventually it turns out not crashing, after I change the 'string' into 'char*', giving up using string in STL map class.

But another problem is that the template map does not support comparison for char*, so I have to add a comparitor in order to make it work, otherwise find() call will always return null.

Final solution:

struct cmp_str
{
    bool operator()(char const *a, char const *b)
    {
        return strcmp(a, b) < 0;
    }
};
map<char*,uint,cmp_str> m_BoneMapping; // maps a bone name to its index

Shaders
----------------
Since this is the first time working on Android shader. It seems a lot difference between regular shader code and Android shader.

First of all, the "#version 330" will not work. The phone I tested is Samsung Galaxy S6, and it does not support 330. I tried to change into "#version 300 es". Even though it compiles, but actually created a lot of problem later when I try to use attributes and other key words. Eventually after study Google example code, I removed the "#version" key word all together.

"layout" key word also not supported. I changed into "attribute". "out" key word will cause problem when compiling without "#version" key word. I changed it into "varying".

"ivec4" also will create compiling problems, I have to change it into "vec4", and change corresponding code to use float instead of integer. Hence, the shader has to cast the float back into integer when using it as array index:

BoneTransform += gBones[int(BoneIDs[1])] * Weights[1];

Also, I changed the FragColor into gl_FragColor and position into gl_Position.

It seems using "precision highp float;" is necessary, otherwise the compiling will fail.

OpenGL API
----------------
As expected, not all OpenGL API are supported. The ones not supported:

glGenVertexArrays()
glBindVertexArray()
glVertexAttribIPointer()
glDrawElementsBaseVertex()

I changed the code to use regular buffer rather than vertex array avoiding using glGenVertexArrays().
Also since the integer ivec4 is not supported in shader, so naturally I have to change glVertexAttribIPointer() into glVertexAttribPointer() to map float instead integer.
glDrawElementsBaseVertex() can be replaced by glDrawElements(), due to my test. It turns out working just fine.

glDrawElementsBaseVertex(GL_TRIANGLES,
                         m_Entries[i].NumIndices,
                         GL_UNSIGNED_INT,
                         (void*)(sizeof(uint) * m_Entries[i].BaseIndex),
                         m_Entries[i].BaseVertex);


glDrawElements(GL_TRIANGLES, m_Entries[i].NumIndices, GL_UNSIGNED_INT,
                       (void*)(sizeof(uint) * m_Entries[i].BaseIndex));

The change to glDrawElements() causes problem when draw multiple entries (meshes). That is why the model head and other meshes are not correctly drew on the screen. The fix would be take BaseVertex into account. When I got the Indices values in LoadMesh(), I add the BaseVertex dirctly to Indices values before even binding the array to vertex buffer. In this way, BaseVertex is already taken into account in index buffer, no need for glDrawElementsBaseVertex(). Problem resolved!

                       
FreeGlut
----------------
I was able to compile and run FreeGlut on Android, but it does not show anything. It seems the initialization is not working for Android. I have not dig into see why. Instead of using FreeGlut, I just wrote my own initialization which is probably good for a prototype.

Modulize
----------------
Originally, I would like to keep it modulized. I compile FreeGlut, ImageMagick++, Assimp separately, but since too many broken pieces in different module need my debugging. I eventually end up put them into one project. This is TODO item, should later figure out modulizing those modules. Hopefully can make FreeGlut work again.

Dynamic Linking
----------------
I got a dynamic link problem at very beginning of this project. By search on the Internet, I figured out I have to overwrite the NativeActivity class in Java layer to preload my dependences like: "stlport_shared", "assimp". This seems stupid, but it happened. Also, I should remove the tag 'android:hasCode="false"' in application parameter list, in order to overwrite the NativeActivity class.

Exception support in C++
----------------
It seems adding following flags to CMakeLists.txt helps:

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fexceptions -v")
set( CMAKE_VERBOSE_MAKEFILE on )

Some of the library code need exception handling.

Compile
===========

To compile assimp, we need download CMake 3.7.0-rc3 on Mac OSX 10.11.

Some configurations may matter:

set source code location to assimp
set build binaries location to bin

add configure entries:
ANDROID_ABI:armeabi-v7a
ANDROID_NATIVE_API_LEVEL:9
ASSIMP_ANDROID_JNIIOSYSTEM:ON
ASSIMP_INCLUDE_INSTALL_DIR:include
ASSIMP_LIB_INSTALL_DIR:lib
CMAKE_ASM_COMPILER:${Your NDK path}/ndk-bundle/toolchains/arm-linux-androideabi-4.9/prebuilt/darwin-x86_64/bin/arm-linux-androideabi-gcc
CMAKE_INSTALL_PREFIX:${Your NDK path}/ndk-bundle/toolchains/arm-linux-androideabi-4.9/prebuilt/darwin-x86_64/user
CMAKE_TOOLCHAIN_FILE:${Your Android CMake path - in this repo}/android-cmake/android.toolchain.cmake

Then click on "Configure" button and "Generate" button. Makefiles should be generated. Go ahead and make it.

